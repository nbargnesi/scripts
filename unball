#!/usr/bin/env bash
# Copyright (c) 2011-2014 Nick Bargnesi
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Status display, file by file.
function report() {
    echo -ne "($1 type $2) --> to directory $3\n"
}

# Need at least one archive to unball.
if test $# -eq 0
	then
		echo -ne "Usage: $0 [FILE] ... \n" 
        echo -ne "Extracts an archive (tgz, tar.gz, tar.bz2, zip, rar, jar, tar).\n" 
		exit 1
fi

# Iterate the argument list, checking types, and extracting/uncompressing.
for FILE in "$@"; do
    if [ -r "$1" ]; then
        file=$(basename "$1")
        if [ ! -z "$(echo ${file} | grep -i \\.bz2)" ]; then
            TYPE=BZ2
        elif [ ! -z "$(echo ${file} | grep -i \\.zip)" ]; then
            TYPE=ZIP
        elif [ ! -z "$(echo ${file} | grep -i \\.gz)" ]; then
            TYPE=GZIP
        elif [ ! -z "$(echo ${file} | grep -i \\.tgz)" ]; then
            TYPE=TGZ
        elif [ ! -z "$(echo ${file} | grep -i \\.rar)" ]; then
            TYPE=RAR
        elif [ ! -z "$(echo ${file} | grep -i \\.jar)" ]; then
            TYPE=JAR
        elif [ ! -z "$(echo ${file} | grep -i \\.tar)" ]; then
            TYPE=TAR
        else
            TYPE=UNK
        fi

        case $TYPE in
            BZ2)

                # Get the top-level directories in the tar archive.
                DIRS_IN_TAR=$(tar tjf "$file" | cut -d '/' -f1 | sort | uniq)
                # Count the directories
                NR_DIRS_IN_TAR=$(echo "$DIRS_IN_TAR" | wc -l)

                if [ "$NR_DIRS_IN_TAR" == "1" ]; then
                    # One directory, use as-is.
                    report "$file" "$TYPE" "$DIRS_IN_TAR"
                    tar xjf "$FILE"
                else
                    # More than one directory, prevent a 'tarbomb'.
				    DIR=$(echo "$file" | sed "s/\.bz2$//i" | sed "s/\.tar$//i")
                    report "$file" "$TYPE" "$DIR"
                    mkdir -p "${DIR}"
                    tar xjf "$FILE" -C "${DIR}"
                fi
                ;;

            GZIP)

                # Get the top-level directories in the tar archive.
                DIRS_IN_TAR=$(tar tzf "$file" | cut -d '/' -f1 | sort | uniq)
                # Count the directories
                NR_DIRS_IN_TAR=$(echo "$DIRS_IN_TAR" | wc -l)

                if [ "$NR_DIRS_IN_TAR" == "1" ]; then
                    # One directory, use as-is.
                    report "$file" "$TYPE" "$DIRS_IN_TAR"
                    tar xzf "$FILE"
                else
                    # More than one directory, prevent a 'tarbomb'.
                    DIR=$(echo "$file" | sed "s/\.gz$//i" | sed "s/\.tar$//i")
                    report "$file" "$TYPE" "$DIR"
                    mkdir -p "${DIR}"
                    tar xzf "$FILE" -C "${DIR}"
                fi
                ;;

            TGZ)

                # Get the top-level directories in the tar archive.
                DIRS_IN_TAR=$(tar tzf "$file" | cut -d '/' -f1 | sort | uniq)
                # Count the directories
                NR_DIRS_IN_TAR=$(echo "$DIRS_IN_TAR" | wc -l)

                if [ "$NR_DIRS_IN_TAR" == "1" ]; then
                    # One directory, use as-is.
                    report "$file" "$TYPE" "$DIRS_IN_TAR"
                    tar xzf "$FILE"
                else
                    # More than one directory, prevent a 'tarbomb'.
                    DIR=$(echo "$file" | sed "s/\.tgz$//i")
                    report "$file" "$TYPE" "$DIR"
                    mkdir -p "${DIR}"
                    tar xzf "$FILE" -C "${DIR}"
                fi
                ;;

            ZIP)

                # Get the top-level directories in the zip.
                DIRS_IN_ZIP=$(zipinfo -1 "$FILE" | cut -d '/' -f1 | sort | uniq)
                # Count the directories.
                NR_DIRS_IN_ZIP=$(echo "$DIRS_IN_ZIP" | wc -l)
                # One directory, unzip as-is.
                if [ "$NR_DIRS_IN_ZIP" == "1" ]; then
                    report "$file" "$TYPE" "$DIRS_IN_ZIP"
                    unzip -qq "$FILE"
                # More than one directory, unzip preventing a 'zipbomb'.
                else
				    DIR=$(echo "$file" | sed "s/\.zip$//i")
                    report "$file" "$TYPE" "$DIR"
                    mkdir -p "${DIR}"
				    unzip -qq -d "${DIR}" "$FILE"
                fi
                ;;

            RAR)
                DIR=$(echo "$file" | sed "s/\.rar$//i")
                report "$file" "$TYPE" "$DIR"
                mkdir -p "${DIR}"
                cd "${DIR}"
				unrar e -inul "$(dirname $FILE)/$file"
                cd ..
                ;;
            JAR)

                # Get the top-level directories in the JAR.
                DIRS_IN_JAR=$(zipinfo -1 "$FILE" | cut -d '/' -f1 | sort | uniq)
                # Count the directories.
                NR_DIRS_IN_JAR=$(echo "$DIRS_IN_JAR" | wc -l)
                # One directory, unzip as-is.
                if [ "$NR_DIRS_IN_JAR" == "1" ]; then
                    report "$file" "$TYPE" "$DIRS_IN_JAR"
                    unzip -qq "$FILE"
                # More than one directory, unzip preventing a 'jarbomb'.
                else
				    DIR=$(echo "$file" | sed "s/\.jar$//i")
                    report "$file" "$TYPE" "$DIR"
                    mkdir -p "${DIR}"
				    unzip -qq -d "${DIR}" "$FILE"
                fi
                ;;
            TAR)
                DIR=$(echo "$file" | sed "s/\.tar$//i")
                report "$file" "$TYPE" "$DIR"
                mkdir -p "${DIR}"
				tar xf $file -C "${DIR}"
                ;;
            UNK)
                echo -ne "($1 type not recognized)\n"
                ;;
        esac
    fi
    shift
done
exit 0
