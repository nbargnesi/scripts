#!/usr/bin/env bash
# Copyright (c) 2011-2014 Nick Bargnesi
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

### BEGIN INCLUDE SCRIPT STUB ###

#!/bin/sh

# Provide an framework for shell scripts to retrieve options
# passed as command line arguments

# Use the scriptstub.sh framework by either including it with
# the . operator or by embedding this script into your own

ME=$(basename $0)
SUCCESS=0
FAILURE=1
# All the arguments passed to us are place in ARGS
ARGS="$@"

# Returns "true" if the option $1 is include in the list
# $1: option to search for in argument list
#
# Returns 0 on success and sets $RESULT to true, 1 otherwise
#
# example code:
# ARGS="--optionA --optionB --help"
# if getOpt --optionB; then
#   echo $RESULT # prints true
# fi
#
function getOpt() {
    for arg in $ARGS; do
        if [ "$arg" = "$1" ]; then
            RESULT="true"
            return $SUCCESS
        fi
    done
    return $FAILURE
}

#
# Returns the argument proceeding after $1 if $1 is included in the list
# $1: option to search for in argument list
# 
# Returns 0 on success and sets $RESULT, 1 otherwise
#
# example code:
# ARGS="--file /home/user/scriptstub"
# if getOptParam --file; then
#   echo $RESULT # prints /home/user/scriptstub
# fi
# 
# 
#
function getOptParam() {
    for arg in $ARGS; do
        if [ "$arg" = "$1" ]; then
            found="true"
        elif [ "$found" = "true" ]; then
            RESULT=$arg
            return $SUCCESS
        else
            found="false"
        fi
    done
    return $FAILURE
}

#
# Returns the argument if any of the arguments are included in the list
# $@: options to search for in argument list
#
# Returns 0 on success and sets $RESULT, 1 otherwise
#
# example code:
# ARGS="--help"
# if getAnyOpt -h -H --help; then
#   echo Help!
# fi
#
function getAnyOpt() {
    for arg in $@; do
        if getOpt $arg; then
            RESULT="$arg"
            return $SUCCESS
        fi
    done
    return $FAILURE
}

#
# Shows the help banner, you need to have $HELP set prior to calling
# showHelp.  This function exists with SUCCESS.
#
function showHelp() {
    echo -en $HELP
    exit $SUCCESS
}

#
# Shows the usage banner, you need to have $USAGE set prior to calling
# showUsage.  This function does not exit.
#
function showUsage() {
    echo -en $USAGE
}

#
# Returns the last argument or empty string if no arguments.
# $@: argument list
#
function getLastArgument() {
    for arg in $@; do
        RESULT=$arg
    done
    return $SUCCESS
}

### END INCLUDE SCRIPT STUB ###

function checkArg() {
    if [ -r "$1" ]; then
        RESULT="true"
        return 0
    else
        RESULT=""
        return 1
    fi
}

USAGE="
Usage: $ME [TOKEN]... \n\
Try \`$ME --help' for more information. \n"

HELP="
Usage: $ME [TOKEN]... \n\
Removes lines containing any of the specified tokens. \n\
Example: cat file | $ME token1 token2 ... tokenN \n\
\n\
Options: \n\
 -H, -h, --help\t\tdisplay this help and exit \n\
\n\
"

if getAnyOpt -h -H --help; then
    showHelp
    exit $FAILURE
fi

GREP_ARGUMENT=""
for token in $@; do
    if [ -z "$GREP_ARGUMENT" ]; then
        GREP_ARGUMENT="${token}"
    else
        GREP_ARGUMENT="$GREP_ARGUMENT|${token}"
    fi
done

if [ -z "$GREP_ARGUMENT" ]; then
    cat /dev/stdin
else
    grep -Ev "$GREP_ARGUMENT"
fi

